/*
 * Copyright (c) 2009-2012 Mark D. Hill and David A. Wood
 * Copyright (c) 2010-2012 Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

machine(L1Cache, "MI Example L1 Cache")
: Sequencer * sequencer,
  CacheMemory * cacheMemory,
  Cycles cache_response_latency = 12,
  Cycles issue_latency = 2,
  bool send_evictions
{

  // NETWORK BUFFERS
  MessageBuffer requestFromCache, network="To", virtual_network="2", ordered="true", vnet_type="request";
  MessageBuffer responseFromCache, network="To", virtual_network="4", ordered="true", vnet_type="response";

  MessageBuffer forwardToCache, network="From", virtual_network="3", ordered="true", vnet_type="forward";
  MessageBuffer responseToCache, network="From", virtual_network="4", ordered="true", vnet_type="response";

  // STATES
  state_declaration(State, desc="Cache states") {
    //stable states
    I, AccessPermission:Invalid, desc="Invalid";
    M, AccessPermission:Read_Write, desc="Modified";
    S, AccessPermission:Read_Only, desc="shared";

    //transient states 
    //FIXME, figure out what transient states to add
    II, AccessPermission:Busy, desc="Invalid, issued PUT";
    MI, AccessPermission:Busy, desc="Modified, issued PUT";
    MII, AccessPermission:Busy, desc="Modified, issued PUTX, received nack";

    IS, AccessPermission:Busy, desc="Issued request for LOAD/IFETCH, bus action: GETS; data from: memory";
    IM, AccessPermission:Busy, desc="Issued request for STORE/ATOMIC";
    IMI, AccessPermission:Busy, desc="going from I to M, while wating for ack";
    SM, AccessPermission:Busy, desc="Bus Action: GETX; data from: memory or other processor cache";
    SMI, AccessPermission:Busy, desc="Bus Action: GETX; data from: memory or other processor cache";
    SI, AccessPermission:Busy, desc="Bus Action: GETX; data from: memory or other processor cache";
    MS, AccessPermission:Busy, desc="Bus Action: GETS; data from: other processor's cache";
  }

  // EVENTS
  enumeration(Event, desc="Cache events") {
    // From processor
    //FIXME i should not worry about it
    Load,       desc="Load request from processor";
    Ifetch,     desc="Ifetch request from processor";
    Store,      desc="Store request from processor";

    WB_Ack,     desc="Ack from the directory for a writeback";
    
    Inv_Ack,	 desc="Invalidate Ack";
    Inv_Ack_all, desc="Last Invalidate Ack";

    Data_from_Dir_No_Acks,       desc="Data from Directory, 0 Acks";
    Data_from_Dir_Ack_Cnt,       desc="Data from Directory, along with Ack Count";
    Data_from_Dir_Ack_Cnt_Last,  desc="Data from Directory, along with Ack Count, arrive after Inv_Ack";
    Data_from_Owner,		 desc="Data from remote L1 (remote Owner)";

    Fwd_GETX,        desc="cache-to-cache transfer";
    Fwd_GETS,        desc="GETS";

    Inv,        desc="Invalidate request from dir";

    Replacement,  desc="Replace a block";
  }

  // STRUCTURE DEFINITIONS
  //FIXME , no need to change structure 
  MessageBuffer mandatoryQueue, ordered="false";

  // CacheEntry
  structure(Entry, desc="...", interface="AbstractCacheEntry") {
    State CacheState,        desc="cache state";
    bool Dirty,              desc="Is the data dirty (different than memory)?";
    DataBlock DataBlk,       desc="Data in the block";
  }

  // TBE fields
  structure(TBE, desc="...") {
    State TBEState,          desc="Transient state";
    DataBlock DataBlk,       desc="data for the block, required for concurrent writebacks";
    int pendingAcks, default="0", desc="number of pending acks";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Address);
    void allocate(Address);
    void deallocate(Address);
    bool isPresent(Address);
  }


  // STRUCTURES
  TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";

  // PROTOTYPES
  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE b);
  void unset_tbe();
  void profileMsgDelay(int virtualNetworkType, Cycles b);

  Entry getCacheEntry(Address address), return_by_pointer="yes" {
    return static_cast(Entry, "pointer", cacheMemory.lookup(address));
  }

  // FUNCTIONS
  Event mandatory_request_type_to_event(RubyRequestType type) {
   if (type == RubyRequestType:LD) {
      return Event:Load;
    } else if (type == RubyRequestType:IFETCH) {
      return Event:Ifetch;
    } else if ((type == RubyRequestType:ST) || (type == RubyRequestType:ATOMIC)) {
      return Event:Store;
    } else {
      error("Invalid RubyRequestType");
    }
  }

  State getState(TBE tbe, Entry cache_entry, Address addr) {

    if (is_valid(tbe)) {
      return tbe.TBEState;
    }
    else if (is_valid(cache_entry)) {
      return cache_entry.CacheState;
    }
    else {
      return State:I;
    }
  }

  void setState(TBE tbe, Entry cache_entry, Address addr, State state) {

    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }

    if (is_valid(cache_entry)) {
      cache_entry.CacheState := state;
    }
  }

  AccessPermission getAccessPermission(Address addr) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      return L1Cache_State_to_permission(tbe.TBEState);
    }

    Entry cache_entry := getCacheEntry(addr);
    if(is_valid(cache_entry)) {
      return L1Cache_State_to_permission(cache_entry.CacheState);
    }

    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Entry cache_entry, Address addr, State state) {
    if (is_valid(cache_entry)) {
      cache_entry.changePermission(L1Cache_State_to_permission(state));
    }
  }

  DataBlock getDataBlock(Address addr), return_by_ref="yes" {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      return tbe.DataBlk;
    }

    return getCacheEntry(addr).DataBlk;
  }

  int getPendingAcks(TBE tbe) {
    return tbe.pendingAcks;
  }
  // NETWORK PORTS
  //FIXME maybe I need to change it
  out_port(requestNetwork_out, RequestMsg, requestFromCache);
  out_port(responseNetwork_out, ResponseMsg, responseFromCache);

  in_port(forwardRequestNetwork_in, RequestMsg, forwardToCache) {
    if (forwardRequestNetwork_in.isReady()) {
      peek(forwardRequestNetwork_in, RequestMsg, block_on="Addr") {

        Entry cache_entry := getCacheEntry(in_msg.Addr);
        TBE tbe := TBEs[in_msg.Addr];

        if (in_msg.Type == CoherenceRequestType:GETX) {
          trigger(Event:Fwd_GETX, in_msg.Addr, cache_entry, tbe);
        }
        else if(in_msg.Type == CoherenceRequestType:GETS) {
            trigger(Event:Fwd_GETS, in_msg.Addr, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceRequestType:WB_ACK) {
          trigger(Event:WB_Ack, in_msg.Addr, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceRequestType:INV) {
          trigger(Event:Inv, in_msg.Addr, cache_entry, tbe);
        }
        else {
          error("Unexpected message");
        }
      }
    }
  }

  in_port(responseNetwork_in, ResponseMsg, responseToCache) {
    if (responseNetwork_in.isReady()) {
      peek(responseNetwork_in, ResponseMsg, block_on="Addr") {

        Entry cache_entry := getCacheEntry(in_msg.Addr);
        TBE tbe := TBEs[in_msg.Addr];

        if (in_msg.Type == CoherenceResponseType:DATA_FROM_DIR) {
	        if (in_msg.AckCount == 0) {
                trigger(Event:Data_from_Dir_No_Acks, in_msg.Addr, cache_entry, tbe);
            }else{
                if ( (getPendingAcks(tbe) - in_msg.AckCount) == 0 ) {
                    trigger(Event:Data_from_Dir_Ack_Cnt_Last, in_msg.Addr, cache_entry, tbe);
                }else{
                    trigger(Event:Data_from_Dir_Ack_Cnt, in_msg.Addr, cache_entry, tbe);
                }
            }
        }else if (in_msg.Type == CoherenceResponseType:DATA_FROM_OWNER) {
            trigger(Event:Data_from_Owner, in_msg.Addr, cache_entry, tbe);
        }else if (in_msg.Type == CoherenceResponseType:ACK) {
            if ( (getPendingAcks(tbe) - in_msg.AckCount) == 0 ) {
                trigger(Event:Inv_Ack_all, in_msg.Addr, cache_entry, tbe);
            }else{
                trigger(Event:Inv_Ack, in_msg.Addr, cache_entry, tbe);
            }
        }else {
          error("Unexpected message");
        }
      }
    }
  }

    // Mandatory Queue
  in_port(mandatoryQueue_in, RubyRequest, mandatoryQueue, desc="...") {
    if (mandatoryQueue_in.isReady()) {
      peek(mandatoryQueue_in, RubyRequest, block_on="LineAddress") {

        Entry cache_entry := getCacheEntry(in_msg.LineAddress);
        if (is_invalid(cache_entry) &&
            cacheMemory.cacheAvail(in_msg.LineAddress) == false ) {
          // make room for the block
          trigger(Event:Replacement, cacheMemory.cacheProbe(in_msg.LineAddress),
                  getCacheEntry(cacheMemory.cacheProbe(in_msg.LineAddress)),
                  TBEs[cacheMemory.cacheProbe(in_msg.LineAddress)]);
        }
        else {
          trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                  cache_entry, TBEs[in_msg.LineAddress]);
        }
      }
    }
  }

  // ACTIONS
  //FIXME , need to add action for GETS
  action(a_issueRequest, "a", desc="Issue a request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
    out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:GETX;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(as_issueRequest, "as", desc="Issue a request for GETS") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
    out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:GETS;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(b_issuePUT, "b", desc="Issue a PUT request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
      assert(is_valid(cache_entry));
      out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:PUTX;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.DataBlk := cache_entry.DataBlk;
      out_msg.MessageSize := MessageSizeType:Data;
    }
  }

  action(bs_issuePUT, "bs", desc="Issue a PUTS request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
      assert(is_valid(cache_entry));
      out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:PUTS;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.DataBlk := cache_entry.DataBlk;
      out_msg.MessageSize := MessageSizeType:Data;
    }
  }

  action(e_sendData, "e", desc="Send data from cache to requestor") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) {
        assert(is_valid(cache_entry));
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:DATA_FROM_OWNER;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(ee_sendDataFromTBE, "\e", desc="Send data from TBE to requestor") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) {
        assert(is_valid(tbe));
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:DATA_FROM_OWNER;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.DataBlk := tbe.DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }
  
  action(de_sendDataFromCache, "de", desc="Send data from cache to directory") 
  { 
     enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) { 
        assert(is_valid(cache_entry));
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.Sender := machineID;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
     }
  }

  action(dee_sendDataFromTBE, "d\e", desc="Send data from TBE to directory") {
     enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) {
        assert(is_valid(tbe));
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.Sender := machineID;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.DataBlk := tbe.DataBlk;
	out_msg.MessageSize := MessageSizeType:Response_Data;
     }
  }

  action(fi_sendInvAck, "fi", desc="send Invalidation Acknowledgement to Requestor") 
  {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) {
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:ACK;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Response_Control;
        out_msg.AckCount := 1;
      }
    }
  }

  action(i_allocateL1CacheBlock, "i", desc="Allocate a cache block") {
    if (is_valid(cache_entry)) {
    } else {
      set_cache_entry(cacheMemory.allocate(address, new Entry));
    }
  }

  action(h_deallocateL1CacheBlock, "h", desc="deallocate a cache block") {
    if (is_valid(cache_entry)) {
      cacheMemory.deallocate(address);
      unset_cache_entry();
    }
  }

  action(m_popMandatoryQueue, "m", desc="Pop the mandatory request queue") {
    mandatoryQueue_in.dequeue();
  }

  action(n_popResponseQueue, "n", desc="Pop the response queue") {
    profileMsgDelay(1, responseNetwork_in.dequeue());
  }

  action(o_popForwardedRequestQueue, "o", desc="Pop the forwarded request queue") {
    profileMsgDelay(2, forwardRequestNetwork_in.dequeue());
  }

  action(p_profileMiss, "pi", desc="Profile cache miss") {
      ++cacheMemory.demand_misses;
  }

  action(p_profileHit, "ph", desc="Profile cache miss") {
      ++cacheMemory.demand_hits;
  }

  action(r_load_hit, "r", desc="Notify sequencer the load completed.") {
    assert(is_valid(cache_entry));
    DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
    sequencer.readCallback(address, cache_entry.DataBlk, false);
  }

  action(rx_load_hit, "rx", desc="External load completed.") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
      sequencer.readCallback(address, cache_entry.DataBlk, true,
                             machineIDToMachineType(in_msg.Sender));
    }
  }

  action(s_store_hit, "s", desc="Notify sequencer that store completed.") {
    assert(is_valid(cache_entry));
    DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
    sequencer.writeCallback(address, cache_entry.DataBlk, false);
  }

  action(sx_store_hit, "sx", desc="External store completed.") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
      sequencer.writeCallback(address, cache_entry.DataBlk, true,
                              machineIDToMachineType(in_msg.Sender));
    }
  }

  action(u_writeDataToCache, "u", desc="Write data to the cache") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      cache_entry.DataBlk := in_msg.DataBlk;
    }
  }

  action(q_updateAckCount, "q", desc="Update ack count") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(tbe));
      tbe.pendingAcks := tbe.pendingAcks - in_msg.AckCount;
      APPEND_TRANSITION_COMMENT(in_msg.AckCount);
      APPEND_TRANSITION_COMMENT(" p: ");
      APPEND_TRANSITION_COMMENT(tbe.pendingAcks);
    }
  }

  action(forward_eviction_to_cpu, "\cc", desc="sends eviction information to the processor") {
    if (send_evictions) {
      DPRINTF(RubySlicc, "Sending invalidation for %s to the CPU\n", address);
      sequencer.evictionCallback(address);
    }
  }

  action(v_allocateTBE, "v", desc="Allocate TBE") {
    TBEs.allocate(address);
    set_tbe(TBEs[address]);
  }

  action(w_deallocateTBE, "w", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
  }

  action(x_copyDataFromCacheToTBE, "x", desc="Copy data from cache to TBE") {
    assert(is_valid(cache_entry));
    assert(is_valid(tbe));
    tbe.DataBlk := cache_entry.DataBlk;
  }

  action(z_stall, "z", desc="stall") {
    // do nothing
  }

  // TRANSITIONS
  transition(I, {Load,Ifetch} , IS)
  {
    i_allocateL1CacheBlock;	
    p_profileMiss;			
    v_allocateTBE;			
	as_issueRequest;			
	m_popMandatoryQueue;
  }

  transition(I, Store, IM)
  {
    i_allocateL1CacheBlock;
	p_profileMiss;
    v_allocateTBE;			
	a_issueRequest;			
	m_popMandatoryQueue;	
  }

  transition(IS, {Load, Ifetch})
  {
	z_stall;
  }
  
  transition(IS, Store)
  {
	z_stall;
  }

  transition(IS, Replacement)
  {
	z_stall;
  }
  
  transition(IS, Inv)
  {
	z_stall;
  }


  transition(IS, Data_from_Dir_No_Acks, S)
  {
	u_writeDataToCache;	//write incoming data to cache
	rx_load_hit;		//load hit due to a cache miss that was serviced
	w_deallocateTBE;	//remove TBE since we are done
	n_popResponseQueue;	//finish with request from the Response queue
  }

  transition(IS, Data_from_Owner, S)
  {
	u_writeDataToCache;	//write incoming data to cache
	rx_load_hit;		//load hit due to a cache miss that was serviced
	w_deallocateTBE;	//remove TBE since we are done
	n_popResponseQueue;	//finish with request from the Response queue
  }

  //Begin IM state transitions
  transition(IM, {Load, Ifetch, Store, Replacement})
  {
	z_stall;
  }

  transition(IM, {Fwd_GETS, Fwd_GETX})
  {
	z_stall;
  }

  transition(IM, Data_from_Dir_No_Acks, M)
  {
	u_writeDataToCache;	//write incoming data to cache
	sx_store_hit;		//we got a store hit in response to servicing a cache miss
	w_deallocateTBE;	//remove TBE since we are done
	n_popResponseQueue;	//finish with request from the Response queue
  }

  transition(IM, Data_from_Dir_Ack_Cnt, IMI)
  {
	u_writeDataToCache;	//write incoming data to cache
    q_updateAckCount;
	n_popResponseQueue;	//finish with request from the Response queue	
  }

  transition(IM, Data_from_Owner, M)
  {
	u_writeDataToCache;	//write incoming data to cache
	sx_store_hit;		//we got a store hit in response to servicing a cache miss
	w_deallocateTBE;	//remove TBE since we are done
	n_popResponseQueue;	//finish with request from the Response queue
  }

  transition(IM, Inv_Ack)
  {
	q_updateAckCount;	//do ack-- ->hope this is what this means
	n_popResponseQueue;	//finish with request from the Response queue
  }

  transition(IM, Data_from_Dir_Ack_Cnt_Last, M) 
  {
	u_writeDataToCache; //write incoming data to cache
	sx_store_hit;       //we got a store hit in response to servicing a cache miss
	q_updateAckCount;   //update ack count
	w_deallocateTBE;    //remove TBE since we are done
	n_popResponseQueue; //finish with request from the Response queue
  }

  transition(IMI, {Load, Ifetch, Store, Replacement})
  {
	z_stall;
  }

  transition(IMI, {Fwd_GETS, Fwd_GETX})
  {
      z_stall;
  }

  transition(IMI, Inv_Ack)
  {
	q_updateAckCount;	//do ack-- ->hope this is what this means
	n_popResponseQueue;	//finish with request from the Response queue;
  }

  transition(IMI, Inv_Ack_all, M)
  {
	sx_store_hit;		//we got a store hit in response to servicing a cache miss
	w_deallocateTBE;	//remove TBE since we are done
	n_popResponseQueue;	//finish with request from the Response queue
  }

  transition(S, {Load, Ifetch})
  {
	r_load_hit;
	m_popMandatoryQueue;
  }

  transition(S, Store, SM)
  {
	p_profileMiss;			//does not have proper permissions
	v_allocateTBE;			//going into a transient state so we must allocate a Transient Block Entry
	a_issueRequest;			//issue a GetX to dir
    x_copyDataFromCacheToTBE; //copy data to tbe
	m_popMandatoryQueue;	//finish with request	
  }

  transition(S, Replacement, SI)
  {
	bs_issuePUT;				//issue PUTS to directory
	v_allocateTBE;				//allocate a TBE because we are moving to transient state
    h_deallocateL1CacheBlock;	//since we are invalidating/doing cache replacement
	forward_eviction_to_cpu;	//tell CPU eviction occured
  }

  transition(S, Inv, I)
  {
	fi_sendInvAck;				//send the invalidate ack
    h_deallocateL1CacheBlock;   //deallocate the cache block
	forward_eviction_to_cpu;	//forward the eviction
	o_popForwardedRequestQueue;	//pop the request from forwarded request queue because this invalidate
  }

  transition(SM, {Load, Ifetch})
  {
	r_load_hit;
	m_popMandatoryQueue;
  }

  transition(SM, {Store, Replacement, Fwd_GETS, Fwd_GETX})
  {
      z_stall;
  }

  transition(SM, Inv, IM)
  {
    fi_sendInvAck;				//send the invalidate ack
	forward_eviction_to_cpu;	//forward the eviction
	o_popForwardedRequestQueue;	  
  }
    
  transition(SM, Data_from_Dir_No_Acks, M)
  {
	sx_store_hit;				//store hit triggered based on a upgrade miss
	w_deallocateTBE;			//remove TBE since going to stable state
	n_popResponseQueue;			//handled request
  }

  transition(SM, Data_from_Dir_Ack_Cnt, SMI)
  {
	q_updateAckCount;			
	n_popResponseQueue;			//pop the response
  }

  transition(SM, Data_from_Dir_Ack_Cnt_Last, M) 
  {
	sx_store_hit;               //store hit triggered based on a upgrade miss
	q_updateAckCount;
	w_deallocateTBE;            //remove TBE since going to stable state
	n_popResponseQueue;         //handled request
  }
  
  transition(SM, Data_from_Owner, M)
  {
	sx_store_hit;				//store hit triggered based on a upgrade miss
	w_deallocateTBE;			//remove TBE since going to stable state
	n_popResponseQueue;			//pop the response
  }
  
  transition(SM, Inv_Ack)
  {
	q_updateAckCount;	//do ack-- ->hope this is what this means
	n_popResponseQueue;	//finish with request from the Response queue;
  }  

  transition(SMI, {Load, Ifetch})
  {
	r_load_hit;
	m_popMandatoryQueue;
  }
  
  transition(SMI, {Store, Replacement, Fwd_GETS, Fwd_GETX})
  {
      z_stall;
  }

  transition(SMI, Inv_Ack)
  {
    q_updateAckCount;	//do ack-- ->hope this is what this means
    n_popResponseQueue;	//finish with request from the Response queue;
  }

  transition(SMI, Inv_Ack_all, M)
  {
    q_updateAckCount;	//do ack-- ->hope this is what this means
    sx_store_hit;		//we can now call this is a hit because owner
    w_deallocateTBE;	//let go of TBE since we are in stable state
    n_popResponseQueue;	//finish with request from the Response queue;
  }

  transition(M, {Load, Ifetch}) {
    r_load_hit;
    p_profileHit;
    m_popMandatoryQueue;
  }

  transition(M, Store)
  {
	s_store_hit;
	m_popMandatoryQueue;
  }
  
  transition(M, Replacement, MII)
  {
    b_issuePUT;               
    v_allocateTBE;              
    x_copyDataFromCacheToTBE;   
    h_deallocateL1CacheBlock; 
    forward_eviction_to_cpu;
  }

  transition(M, Fwd_GETS, S)
  {
    de_sendDataFromCache;
    e_sendData;
    o_popForwardedRequestQueue;     //handle request
  }  

  transition(M, Fwd_GETX, I)
  {
    e_sendData;
    h_deallocateL1CacheBlock;       //done with cache block and no need for a TBE deallocate
    forward_eviction_to_cpu;		//forward eviction to CPU
    o_popForwardedRequestQueue;     //handle request
  }

  transition(MII, {Load, Ifetch, Store, Replacement})
  {
    z_stall;
  }

  transition(MII, Fwd_GETS, SI)
  {
    ee_sendDataFromTBE; 
    dee_sendDataFromTBE; 
    o_popForwardedRequestQueue;
  }

  transition(MII, Fwd_GETX, II)
  {
    ee_sendDataFromTBE;
    o_popForwardedRequestQueue;
  }

  transition(MII, WB_Ack, I)
  {
    w_deallocateTBE;	           
    o_popForwardedRequestQueue;
  }

  transition(SI, {Load, Ifetch, Store, Replacement})
  {
    z_stall;
  }

  transition(SI, Inv, II)
  {
    fi_sendInvAck;                 
    o_popForwardedRequestQueue;    
  }

  transition(SI, WB_Ack, I)
  {
    w_deallocateTBE;	           
    o_popForwardedRequestQueue;   
  }
  
  transition(II, {Load, Ifetch, Store, Replacement})
  {
    z_stall;
  }

  transition(II, WB_Ack, I)
  {
    w_deallocateTBE;	           
    o_popForwardedRequestQueue;    
  }
}
